-- circle datapath 
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.numeric_std.ALL;


entity circle_datapath is
	port (
		clock_50, resetb 					: in std_logic;
		center_x, center_y, radius 	: in std_logic_vector(7 downto 0);
		octant 								: in std_logic_vector(3 downto 0);
		x_address 							: out std_logic_vector(7 downto 0); -- x axis value, need 8 bits.
		y_address 							: out std_logic_vector(6 downto 0) -- y axis value, need 7 bits.
	);
end entity;

architecture rtl of circle_datapath is
	-- Init local vars for drawing circle.
	signal offset_x, offset_y : std_logic_vector(7 downto 0);
	signal crit : signed(8 downto 0);
	
begin

	offset_y <= 0;
	offset_x <= radius;
	crit <= 1 - signed(radius);

	process(clock_50, resetb)
	begin
	
		if resetb = '0' then
			offset_y <= 0;
			offset_x <= radius;
			crit <= 1 - signed(radius);
		elsif (offset_y <= offset_x) then
			
			if octant = "0001" then
				x_address => unsigned(center_x) + unsigned(offset_x)
				y_address => unsigned(center_y) + unsigned(offset_y)
			
			elsif octant = "0010" then
				x_address => unsigned(center_x) + unsigned(offset_y)
				y_address => unsigned(center_y) + unsigned(offset_x)
			
			elsif octant = "0011" then
				x_address => unsigned(center_x) - unsigned(offset_x)
				y_address => unsigned(center_y) + unsigned(offset_y)
			
			elsif octant = "0100" then
				x_address => unsigned(center_x) - unsigned(offset_y)
				y_address => unsigned(center_y) + unsigned(offset_x)
			
			elsif octant = "0101" then
				x_address => unsigned(center_x) - unsigned(offset_x)
				y_address => unsigned(center_y) - unsigned(offset_y)
			
			elsif octant = "0110" then
				x_address => unsigned(center_x) - unsigned(offset_y)
				y_address => unsigned(center_y) - unsigned(offset_x)
			
			elsif octant = "0111" then
				x_address => unsigned(center_x) + unsigned(offset_x)
				y_address => unsigned(center_y) - unsigned(offset_y)
			
			elsif octant = "1000" then
				x_address => unsigned(center_x) + unsigned(offset_y)
				y_address => unsigned(center_y) - unsigned(offset_x)
			end if;
			
		offset_y <= unsigned(offset_y + 1);
		
		if crit <= '0' then
			crit <= crit + 2 * unsigned(offset_y) + 1;
		else
			offset_x <= unsigned(offset_x) - 1;
			crit <= crit + 2 * (unsigned(offset_y) - unsigned(offset_x)) + 1;
		end if
			
			
		end if;
			
	
	end process;

end rtl;